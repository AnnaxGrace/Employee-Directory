{"version":3,"sources":["components/NavBar.js","components/SearchForm.js","utils/API.js","components/row.js","components/TableHead.js","components/sortButton.js","components/TableContainer.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","className","SearchForm","props","htmlFor","value","name","onChange","handleInputChange","list","type","id","query","axios","get","UserRow","src","image","alt","phone","email","TableHead","SortButton","onClick","sortUsers","TableContainer","state","search","result","event","preventDefault","console","log","target","filter","item","first","includes","setState","sort","a","b","nameA","toUpperCase","nameB","API","then","res","data","results","catch","err","this","map","key","last","picture","thumbnail","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"qQAUeA,MARf,WACI,OACI,yBAAKC,UAAU,UAAf,uB,gCCkBOC,MApBf,SAAoBC,GAChB,OACE,0BAAMF,UAAU,QACd,yBAAKA,UAAU,cACb,2BAAOG,QAAQ,cAAf,gBACA,2BACEC,MAAOF,EAAMG,KACbC,SAAUJ,EAAMK,kBAChBF,KAAK,OACLG,KAAK,QACLC,KAAK,OACLT,UAAU,eACVU,GAAG,Y,iBCTA,EACC,SAASC,GACjB,OAAOC,IAAMC,IALL,kDCeDC,MAff,SAAiBZ,GACb,OAEA,4BACA,4BAAKA,EAAMG,MACX,4BACI,yBAAKU,IAAMb,EAAMc,MAAOC,IAAM,2BAElC,4BAAKf,EAAMgB,MAAX,KACA,4BAAKhB,EAAMiB,SCcAC,MAtBf,WAEI,OACA,4BACI,oCAGA,uCAGA,4CAGA,uCCJOC,MAVf,SAAoBnB,GAChB,OACA,6BACA,4BAAQO,KAAK,SAASa,QAASpB,EAAMqB,UAAWvB,UAAU,YAA1D,uCCgFawB,E,4MA5EbC,MAAQ,CACJC,OAAQ,GACRC,OAAQ,GACRtB,KAAM,I,EAiBRE,kBAAoB,SAAAqB,GAClBA,EAAMC,iBACNC,QAAQC,IAAIH,EAAMI,OAAO5B,OACzB,IAAIuB,EAAS,EAAKF,MAAME,OAAOM,QAAO,SAAAC,GAAI,OAAIA,EAAK7B,KAAK8B,MAAMC,SAASR,EAAMI,OAAO5B,UACpF,EAAKiC,SAAS,CAAEV,Y,EAGlBJ,UAAY,SAAAK,GAEV,IAAID,EAAS,EAAKF,MAAME,OAAOW,MAAK,SAASC,EAAGC,GAC5C,IAAIC,EAAQF,EAAElC,KAAK8B,MAAMO,cACrBC,EAAQH,EAAEnC,KAAK8B,MAAMO,cACzB,OAAID,EAAQE,GACA,EAERF,EAAQE,EACD,EAEJ,KAEX,EAAKN,SAAS,CAAEV,Y,kEAjCG,IAAD,OAClBiB,IACGC,MAAK,SAAAC,GACFhB,QAAQC,IAAIe,GACZ,EAAKT,SAAS,CAAEV,OAAQmB,EAAIC,KAAKC,UACjClB,QAAQC,IAAI,EAAKN,MAAME,WAG1BsB,OAAM,SAAAC,GAAG,OAAIpB,QAAQC,IAAImB,Q,+BA6B9B,OACE,6BAGA,kBAAC,EAAD,CACI3C,kBAAmB4C,KAAK5C,kBACxByC,QAASG,KAAK1B,MAAMpB,OAExB,kBAAC,EAAD,CACIkB,UAAW4B,KAAK5B,YAEpB,+BACA,+BACA,kBAAC,EAAD,MACC4B,KAAK1B,MAAME,OAAOyB,KAAI,SAAAlB,GAAI,OAC3B,kBAAC,EAAD,CACAmB,IAAKnB,EAAKxB,GAAGN,MACbC,KAAM6B,EAAK7B,KAAK8B,MAAQ,IAAMD,EAAK7B,KAAKiD,KACxCtC,MAAOkB,EAAKqB,QAAQC,UACpBtC,MAAOgB,EAAKhB,MACZC,MAAOe,EAAKf,kB,GAlESsC,aCSdC,MAXf,WACE,OACA,6BACA,kBAAC,EAAD,MAEA,kBAAC,EAAD,QCEkBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdxB,OAAM,SAAAyB,GACL5C,QAAQ4C,MAAMA,EAAMC,c","file":"static/js/main.c6974d94.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction NavBar() {\n    return (\n        <nav className=\"navbar\">\n            Employee-Directory\n        </nav>\n    )\n}\n\nexport default NavBar;","import React from \"react\";\n\nfunction SearchForm(props) {\n    return (\n      <form className=\"Name\">\n        <div className=\"form-group\">\n          <label htmlFor=\"NameSearch\">Search Name:</label>\n          <input\n            value={props.name}\n            onChange={props.handleInputChange}\n            name=\"name\"\n            list=\"names\"\n            type=\"text\"\n            className=\"form-control\"\n            id=\"name\"\n          />\n          \n        </div>\n      </form>\n    );\n  }\n\nexport default SearchForm;","import axios from \"axios\";\n\nconst BASEURL = \"https://randomuser.me/api/?results=200&nat=us\"\n\n\nexport default {\n    searchName: function(query) {\n        return axios.get(BASEURL);\n    }\n}","import React from \"react\";\n\nfunction UserRow(props) {\n    return (\n        \n    <tr>\n    <td>{props.name}</td>\n    <td>\n        <img src= {props.image} alt = \"pictures of employees\"/>\n    </td>\n    <td>{props.phone} </td>\n    <td>{props.email}</td>\n    </tr>\n        \n    );\n}\n\nexport default UserRow;","import React from \"react\";\n\n\nfunction TableHead() {\n\n    return (\n    <tr>\n        <th>\n            Name\n        </th>\n        <th>\n            Picture\n        </th>\n        <th>\n            Phone Number\n        </th>\n        <th>\n            Email\n        </th>\n\n    </tr>\n    );\n\n}\n\nexport default TableHead;","import React from \"react\";\n\nfunction SortButton(props) {\n    return (\n    <div>\n    <button type=\"button\" onClick={props.sortUsers} className=\"btn-sort\">\n        Sort Alphabetically By First Name\n    </button>\n    </div>\n    );\n}  \n\nexport default SortButton;","import React, { Component } from \"react\";\nimport SearchForm from \"./SearchForm\";\nimport API from \"../utils/API\";\nimport UserRow from \"./row\";\nimport TableHead from \"./TableHead\";\nimport SortButton from \"./sortButton\"\n\nclass TableContainer extends Component {\n\n    state = {\n        search: \"\",\n        result: [],\n        name: \"\"\n      };\n    \n      \n      componentDidMount() {\n        API.searchName()\n          .then(res => {\n              console.log(res)\n              this.setState({ result: res.data.results })\n              console.log(this.state.result)\n              \n          })\n          .catch(err => console.log(err));\n      }\n      \n   \n\n      handleInputChange = event => {\n        event.preventDefault();\n        console.log(event.target.value)\n        let result = this.state.result.filter(item => item.name.first.includes(event.target.value));\n        this.setState({ result })\n      };\n    \n      sortUsers = event => {\n        \n        let result = this.state.result.sort(function(a, b) {\n            var nameA = a.name.first.toUpperCase();\n            var nameB = b.name.first.toUpperCase()\n            if (nameA < nameB) {\n                return -1\n            }\n            if (nameA > nameB) {\n                return 1\n            }\n            return 0;\n        })\n        this.setState({ result })\n      };\n  \n    render() {\n      return (\n        <div>\n          \n       \n        <SearchForm\n            handleInputChange={this.handleInputChange}\n            results={this.state.name}\n        />\n        <SortButton\n            sortUsers={this.sortUsers}\n        />\n        <table>\n        <tbody>\n        <TableHead />\n        {this.state.result.map(item => (\n        <UserRow \n        key={item.id.value}\n        name={item.name.first + \" \" + item.name.last}\n        image={item.picture.thumbnail}\n        phone={item.phone}\n        email={item.email}\n        />\n        ))}\n        </tbody>\n        </table>\n        \n        \n        </div>\n      );\n    }\n  }\n  \n  export default TableContainer;","import React from 'react';\nimport './App.css';\nimport NavBar from \"./components/NavBar\";\nimport TableContainer from \"./components/TableContainer\"\n\nfunction App() {\n  return (\n  <div>\n  <NavBar />\n \n  <TableContainer />\n  \n  </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}